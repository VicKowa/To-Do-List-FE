{"ast":null,"code":"var _jsxFileName = \"/Users/victor/Documents/GitHub/To-Do-List-FE/src/components/TodoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\nimport APIHelper from '../APIHelper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TodoList() {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  useEffect(() => {\n    const fetchTodoAndSetTodos = async () => {\n      const todos = await APIHelper.getAllTodos();\n      setTodos(todos);\n    };\n\n    fetchTodoAndSetTodos();\n  }, []);\n\n  const addTodo = async e => {\n    e.preventDefault();\n\n    if (!todo) {\n      alert(\"please enter something\");\n      return;\n    }\n\n    if (todos.some(({\n      task\n    }) => task === todo)) {\n      alert(`Task: ${todo} already exists`);\n      return;\n    }\n\n    const newTodo = await APIHelper.createTodo(todo);\n    setTodos([...todos, newTodo]);\n  };\n\n  const updateTodo = async (e, id) => {\n    e.stopPropagation();\n    const payload = {\n      completed: !todos.find(todo => todo._id === id).completed\n    };\n    const updatedTodo = await APIHelper.updateTodo(id, payload);\n    setTodos(todos.map(todo => todo._id === id ? updatedTodo : todo));\n  };\n\n  const removeTodo = async (e, id) => {\n    try {\n      e.stopPropagation();\n      await APIHelper.deleteTodo(id);\n      setTodos(todos.filter(({\n        _id: i\n      }) => id !== i));\n    } catch (err) {}\n  };\n  /* const completeTodo = id => {\n     let updatedTodos = todos.map(todo => {\n       if (todo.id === id) {\n         todo.isComplete = !todo.isComplete;\n       }\n       return todo;\n     });\n     setTodos(updatedTodos);\n   };*/\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"What's the Plan for Today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n      onClick: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Todo, {\n      todos: todos //completeTodo={completeTodo}\n      ,\n      removeTodo: removeTodo,\n      updateTodo: updateTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TodoList, \"yk5WshbaLT5gJV9YCVOZUJpms7c=\");\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/Users/victor/Documents/GitHub/To-Do-List-FE/src/components/TodoList.js"],"names":["React","useState","useEffect","TodoForm","Todo","APIHelper","TodoList","todos","setTodos","todo","setTodo","fetchTodoAndSetTodos","getAllTodos","addTodo","e","preventDefault","alert","some","task","newTodo","createTodo","updateTodo","id","stopPropagation","payload","completed","find","_id","updatedTodo","map","removeTodo","deleteTodo","filter","i","err"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;;;AACA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,oBAAoB,GAAG,YAAY;AACvC,YAAMJ,KAAK,GAAG,MAAMF,SAAS,CAACO,WAAV,EAApB;AACAJ,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAHD;;AAIAI,IAAAA,oBAAoB;AACrB,GANQ,EAMN,EANM,CAAT;;AAQA,QAAME,OAAO,GAAG,MAAMC,CAAN,IAAW;AACzBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACN,IAAL,EAAW;AACTO,MAAAA,KAAK,CAAC,wBAAD,CAAL;AACA;AACD;;AACD,QAAIT,KAAK,CAACU,IAAN,CAAW,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAcA,IAAI,KAAKT,IAAlC,CAAJ,EAA6C;AAC3CO,MAAAA,KAAK,CAAE,SAAQP,IAAK,iBAAf,CAAL;AACA;AACD;;AACD,UAAMU,OAAO,GAAG,MAAMd,SAAS,CAACe,UAAV,CAAqBX,IAArB,CAAtB;AACAD,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWY,OAAX,CAAD,CAAR;AACD,GAZD;;AAcA,QAAME,UAAU,GAAG,OAAOP,CAAP,EAAUQ,EAAV,KAAiB;AAClCR,IAAAA,CAAC,CAACS,eAAF;AACA,UAAMC,OAAO,GAAG;AACdC,MAAAA,SAAS,EAAE,CAAClB,KAAK,CAACmB,IAAN,CAAWjB,IAAI,IAAIA,IAAI,CAACkB,GAAL,KAAaL,EAAhC,EAAoCG;AADlC,KAAhB;AAGA,UAAMG,WAAW,GAAG,MAAMvB,SAAS,CAACgB,UAAV,CAAqBC,EAArB,EAAyBE,OAAzB,CAA1B;AACAhB,IAAAA,QAAQ,CAACD,KAAK,CAACsB,GAAN,CAAUpB,IAAI,IAAKA,IAAI,CAACkB,GAAL,KAAaL,EAAb,GAAkBM,WAAlB,GAAgCnB,IAAnD,CAAD,CAAR;AACD,GAPD;;AASA,QAAMqB,UAAU,GAAG,OAAOhB,CAAP,EAAUQ,EAAV,KAAiB;AAClC,QAAI;AACFR,MAAAA,CAAC,CAACS,eAAF;AACA,YAAMlB,SAAS,CAAC0B,UAAV,CAAqBT,EAArB,CAAN;AACAd,MAAAA,QAAQ,CAACD,KAAK,CAACyB,MAAN,CAAa,CAAC;AAAEL,QAAAA,GAAG,EAAEM;AAAP,OAAD,KAAgBX,EAAE,KAAKW,CAApC,CAAD,CAAR;AACD,KAJD,CAIE,OAAOC,GAAP,EAAY,CAAE;AACjB,GAND;AASD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIM,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AAAU,MAAA,OAAO,EAAErB;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,IAAD;AACE,MAAA,KAAK,EAAEN,KADT,CAEE;AAFF;AAGE,MAAA,UAAU,EAAEuB,UAHd;AAIE,MAAA,UAAU,EAAET;AAJd;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAYD;;GApEIf,Q;;KAAAA,Q;AAsET,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\nimport APIHelper from '../APIHelper';\nfunction TodoList() {\n  const [todos, setTodos] = useState([])\n  const [todo, setTodo] = useState(\"\")\n   \n  useEffect(() => {\n    const fetchTodoAndSetTodos = async () => {\n      const todos = await APIHelper.getAllTodos()\n      setTodos(todos)\n    }\n    fetchTodoAndSetTodos()\n  }, [])\n\n  const addTodo = async e => {\n    e.preventDefault()\n    if (!todo) {\n      alert(\"please enter something\")\n      return\n    }\n    if (todos.some(({ task }) => task === todo)) {\n      alert(`Task: ${todo} already exists`)\n      return\n    }\n    const newTodo = await APIHelper.createTodo(todo)\n    setTodos([...todos, newTodo])\n  }\n\n  const updateTodo = async (e, id) => {\n    e.stopPropagation()\n    const payload = {\n      completed: !todos.find(todo => todo._id === id).completed,\n    }\n    const updatedTodo = await APIHelper.updateTodo(id, payload)\n    setTodos(todos.map(todo => (todo._id === id ? updatedTodo : todo)))\n  }\n\n  const removeTodo = async (e, id) => {\n    try {\n      e.stopPropagation()\n      await APIHelper.deleteTodo(id)\n      setTodos(todos.filter(({ _id: i }) => id !== i))\n    } catch (err) {}\n  }\n \n   \n /* const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };*/\n\n\n     \n      return (\n        <>\n          <h1>What's the Plan for Today?</h1>\n          <TodoForm onClick={addTodo} />\n          <Todo\n            todos={todos}\n            //completeTodo={completeTodo}\n            removeTodo={removeTodo}\n            updateTodo={updateTodo}\n          />\n        </>\n      );\n    }\n\nexport default TodoList\n"]},"metadata":{},"sourceType":"module"}